// Generated by CoffeeScript 1.6.2
var CSSParser, Main, Util, main;

Util = {
  toHex: function(c) {
    var hex;

    hex = c.toString(16);
    if (hex.length === 1) {
      return '0' + hex;
    } else {
      return hex;
    }
  },
  convertRGBtoHex: function(str) {
    var b, g, r, vals;

    vals = Util.parseRGBString(str);
    if (vals.length !== 3) {
      return false;
    }
    r = Util.toHex(vals[0]);
    g = Util.toHex(vals[1]);
    b = Util.toHex(vals[2]);
    return '#' + r + g + b;
  },
  parseRGBString: function(str) {
    var matchColors, matches;

    matchColors = /rgb\((\d{1,3}), (\d{1,3}), (\d{1,3})\)/;
    matches = matchColors.exec(str);
    return [parseInt(matches[1]), parseInt(matches[2]), parseInt(matches[3])];
  },
  validateColor: function(str) {
    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/g.test(str);
  }
};

CSSParser = (function() {
  CSSParser.prototype.index = {};

  function CSSParser() {
    this.ss = document.styleSheets[1];
    this.buildIndex();
  }

  CSSParser.prototype.buildIndex = function() {
    var i,
      _this = this;

    i = 0;
    return _.each(this.ss.rules, function(rule) {
      var color, raw, selector;

      raw = rule.cssText.split('{');
      selector = raw[0].trim().substr(1);
      if (_this.isValidRule(selector)) {
        color = raw[1].split('color:')[1];
        color = color.substr(0, color.indexOf(';')).trim();
        _this.index[selector] = {
          color: color,
          index: i
        };
      }
      return i++;
    });
  };

  CSSParser.prototype.isValidRule = function(selector) {
    return selector.length === 3;
  };

  CSSParser.prototype.modifyColor = function(selector, newColor) {
    if ((this.index[selector] != null)) {
      this.index[selector].color = newColor;
      return this.ss.rules[this.index[selector].index].style.color = newColor;
    }
  };

  CSSParser.prototype.validateColor = function(c) {
    if (c.charAt(0) === '#') {
      if (c.length !== 4 && c.length !== 7) {
        return false;
      }
    }
    return true;
  };

  return CSSParser;

})();

Main = (function() {
  function Main() {
    this.css = new CSSParser(document.styleSheets[1]);
    this.populateForm();
  }

  Main.prototype.getRandomHex = function() {
    return '#' + Math.floor(Math.random() * 16777215).toString(16);
  };

  Main.prototype.populateForm = function() {
    var _this = this;

    return _.each(this.css.index, function(obj, selector) {
      var el;

      el = _this.getFormInput(selector);
      if (el.length > 0) {
        el.val(Util.convertRGBtoHex(obj.color));
        return el.keyup(function() {
          return _this.respondToFormChange(el, obj, selector);
        });
      }
    });
  };

  Main.prototype.respondToFormChange = function(el, obj, selector) {
    var val;

    val = el.val();
    if (Util.validateColor(val) === true) {
      el.removeClass('error');
      this.css.modifyColor(selector, el.val());
      return console.log("setting ." + selector);
    } else {
      return el.addClass('error');
    }
  };

  Main.prototype.getFormInput = function(selector) {
    return $("\#" + selector + "-input");
  };

  return Main;

})();

main = {};

$(function() {
  if (typeof prettyPrint !== "undefined" && prettyPrint !== null) {
    prettyPrint();
  }
  return window.main = new Main();
});

/*
//@ sourceMappingURL=main.map
*/
